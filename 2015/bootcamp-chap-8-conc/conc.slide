Bootcamp
Chapter 8 - Concurrency
1 Mar 2015

Sebastien Binet
seb.binet@gmail.com
@0xb1ns

* Concurrency

* Concurrency

Concurrent programming is a large topic but it’s also one of the most
interesting aspects of the Go language.

Concurrent programming in many environments is made difficult by the
subtleties required to implement correct access to shared variables.

Go encourages a different approach in which shared values are passed
around on channels and, in fact, never actively shared by separate
threads of execution.

- Only *one* goroutine has access to the *value* at any given time.
- Data races cannot occur, by design.

``
Do not communicate by sharing memory; instead, share memory by
communicating.
``

* Goroutines

A `goroutine` is a lightweight thread managed by the `Go` *runtime.*

The statement:

  go f(x, y, z)

will start a new `goroutine` running:

  f(x, y, z)


- evaluation of `x`, `y`, `z` and `f` happens in the current `goroutine`
- execution of `f` happens in the new `goroutine`
- `goroutines` run in the *same* *address* *space*
- need to synchronize access to shared memory.

See package [[https://godoc.org/sync][sync]] for useful primitives
(even if not *that* used.)

* Goroutines - II

.play _code/say.go

* Channels

Channels are a typed conduit through which you can *send* and
*receive* values with the channel operator, `<-`.

  ch <- v    // Send v to channel ch.
  v := <-ch  // Receive from ch, and
             // assign value to v.

The data flows in the direction of the arrow.

Like `maps` and `slices`, channels must be created before use:

  ch := make(chan int)

By default, sends and receives block wait until the other side is
ready.

- This allows `goroutines` to *synchronize* without explicit locks or condition variables.

* Divide & Conquer

.play _code/sum.go HLxxx

* Buffered Channels

Channels can be *buffered.*

- Provide the buffer length as the second argument to make to initialize a buffered channel:

  ch := make(chan int, 100)
  
- *Sends* to a buffered channel *block* only when the buffer is *full.*
- *Receives* *block* when the buffer is *empty.*

.play _code/chan-buf.go HLxxx

* Buffered Channels - II

.play _code/chan-buf-dlock.go HLxxx

_Quiz:_ What will happen? Why?

* Buffered Channels - III

.play _code/chan-buf-no-dlock.go HLxxx

_Quiz:_ What will happen? Why?


* Range & close

A sender can *close* a channel to indicate that no more values will be sent.

Receivers can test whether a channel has been closed like so:

  v, ok := <-ch

ok is false if there are no more values to receive or the channel is closed.

The loop:

  for i := range ch { ... }

receives values from the channel repeatedly until it is closed.

*Note:* Only the sender should close a channel, never the receiver. Sending on a closed channel will cause a panic.

*Note:* Channels aren’t like files; you don’t usually need to close them. Closing is only necessary when the receiver must be told there are no more values coming, such as to terminate a range loop.

* Fibonacci

.play _code/fib.go HLxxx

* Select

The `select` statement lets a goroutine *wait* on *multiple* communication operations.

A `select` *blocks* until one of its cases can run, then it executes that case.
It chooses one at *random* if multiple are ready.

  select {
  case v := <-chan1:    // receive from chan1
  case <-chan2:         // receive from chan2
  case chan3 <- foo():  // send to chan3
  }
  
* Fibonacci - bis

.play _code/fib-sel.go /main START/,/main END/ HLxxx

* Default case

The `default` case in a `select` is run if no other case is ready.

Use a default case to *try* a send or receive *without* *blocking*:

  select {
  case i := <-c:
    // use i
  default:
    // receiving from c would block
  }

* Default case

.play _code/bomb.go HLxxx

* Timeout

.play _code/timeout.go /main START/,/main END/ HLxxx

* Exercize: Equivalent Binary Trees

Material for the the exercize is [[http://tour.golang.org/concurrency/7][here]].

* Solution

* Solution

If you print tree.New(1) you will see the following tree:

  ((((1 (2)) 3 (4)) 5 ((6) 7 ((8) 9))) 10)

To implement the `Walk` function, we need two things:

- walk each side of the tree and print the values
- close the channel so the range call isn't stuck.

# We need to set a *recursive* call and for that, we are defining a
# non-exported recWalk function, the function walks the left side first,
# then pushes the value to the channel and then walks the right
# side. This allows our range to get the values in the right order. Once
# all branches have been walked, we can close the channel to indicate to
# the range that the walking is over.

* Solution

.code _code/walk.go /walk START/,/walk END/ HLxxx

* Solution

.code _code/walk.go /same START/,/same END/ HLxxx

* Solution

.play _code/walk.go /main START/,/main END/ HLxxx